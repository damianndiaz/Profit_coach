#!/usr/bin/env python3
"""
Script final de verificaci√≥n antes del deployment a producci√≥n
"""
import os
import sys
import subprocess
from datetime import datetime

def run_pre_deployment_checks():
    """Ejecuta todas las verificaciones pre-deployment"""
    
    print("üöÄ VERIFICACIONES PRE-DEPLOYMENT")
    print("=" * 50)
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    checks_passed = 0
    total_checks = 7
    
    # 1. Verificar archivos cr√≠ticos
    print("1Ô∏è‚É£ Verificando archivos cr√≠ticos...")
    critical_files = [
        "main.py",
        "config.py", 
        "requirements.txt",
        "modules/chat_interface.py",
        "modules/athlete_manager.py",
        "modules/email_manager.py",
        "auth/auth_utils.py",
        "DEPLOYMENT_GUIDE.md"
    ]
    
    missing_files = []
    for file in critical_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå Archivos faltantes: {', '.join(missing_files)}")
    else:
        print("‚úÖ Todos los archivos cr√≠ticos presentes")
        checks_passed += 1
    
    # 2. Verificar sintaxis Python
    print("\n2Ô∏è‚É£ Verificando sintaxis Python...")
    python_files = []
    for root, dirs, files in os.walk("."):
        # Ignorar directorios espec√≠ficos
        dirs[:] = [d for d in dirs if not d.startswith('.') and d != '__pycache__']
        for file in files:
            if file.endswith('.py'):
                python_files.append(os.path.join(root, file))
    
    syntax_errors = []
    for py_file in python_files:
        try:
            with open(py_file, 'r', encoding='utf-8') as f:
                compile(f.read(), py_file, 'exec')
        except SyntaxError as e:
            syntax_errors.append(f"{py_file}: {e}")
        except Exception:
            pass  # Ignorar otros errores que no sean de sintaxis
    
    if syntax_errors:
        print("‚ùå Errores de sintaxis encontrados:")
        for error in syntax_errors:
            print(f"   {error}")
    else:
        print("‚úÖ Sin errores de sintaxis")
        checks_passed += 1
    
    # 3. Verificar requirements.txt
    print("\n3Ô∏è‚É£ Verificando requirements.txt...")
    if os.path.exists("requirements.txt"):
        with open("requirements.txt", "r") as f:
            requirements = f.read()
            critical_deps = ["streamlit", "openai", "pandas", "psycopg2-binary"]
            missing_deps = [dep for dep in critical_deps if dep not in requirements]
            
            if missing_deps:
                print(f"‚ùå Dependencias faltantes: {', '.join(missing_deps)}")
            else:
                print("‚úÖ Todas las dependencias cr√≠ticas presentes")
                checks_passed += 1
    else:
        print("‚ùå requirements.txt no encontrado")
    
    # 4. Verificar archivos de configuraci√≥n
    print("\n4Ô∏è‚É£ Verificando archivos de configuraci√≥n...")
    config_checks = []
    
    # Verificar que config.py contiene las clases necesarias
    try:
        sys.path.insert(0, '.')
        from config import Config
        config_checks.append("‚úÖ Clase Config importable")
        
        # Verificar propiedades cr√≠ticas
        critical_props = ["OPENAI_API_KEY", "DATABASE_URL", "EMAIL_HOST"]
        for prop in critical_props:
            if hasattr(Config, prop):
                config_checks.append(f"‚úÖ {prop} definido")
            else:
                config_checks.append(f"‚ùå {prop} faltante")
    except Exception as e:
        config_checks.append(f"‚ùå Error importando config: {e}")
    
    if all("‚úÖ" in check for check in config_checks):
        print("‚úÖ Configuraci√≥n correcta")
        checks_passed += 1
    else:
        print("‚ùå Problemas en configuraci√≥n:")
        for check in config_checks:
            print(f"   {check}")
    
    # 5. Verificar estructura de m√≥dulos
    print("\n5Ô∏è‚É£ Verificando estructura de m√≥dulos...")
    required_modules = [
        "modules/__init__.py",
        "modules/chat_interface.py",
        "modules/athlete_manager.py", 
        "modules/email_manager.py",
        "auth/__init__.py" if os.path.exists("auth/__init__.py") else None,
        "auth/auth_utils.py"
    ]
    
    module_issues = []
    for module in required_modules:
        if module and not os.path.exists(module):
            module_issues.append(module)
    
    if module_issues:
        print(f"‚ùå M√≥dulos faltantes: {', '.join(module_issues)}")
    else:
        print("‚úÖ Estructura de m√≥dulos correcta")
        checks_passed += 1
    
    # 6. Verificar funcionalidad de archivos adjuntos
    print("\n6Ô∏è‚É£ Verificando funcionalidad de archivos adjuntos...")
    try:
        # Verificar que las funciones cr√≠ticas existen
        from main import process_uploaded_file
        from modules.chat_interface import generate_ai_response_with_assistant
        
        # Verificar que el c√≥digo de archivos est√° presente
        with open("modules/chat_interface.py", "r") as f:
            chat_code = f.read()
            if "files.create" in chat_code and "attachments" in chat_code:
                print("‚úÖ Funcionalidad de archivos adjuntos implementada")
                checks_passed += 1
            else:
                print("‚ùå Funcionalidad de archivos adjuntos incompleta")
    except Exception as e:
        print(f"‚ùå Error verificando archivos adjuntos: {e}")
    
    # 7. Verificar documentaci√≥n
    print("\n7Ô∏è‚É£ Verificando documentaci√≥n...")
    doc_files = ["DEPLOYMENT_GUIDE.md", "FIXES_ARCHIVOS_ADJUNTOS.md", "README.md"]
    missing_docs = [doc for doc in doc_files if not os.path.exists(doc)]
    
    if missing_docs:
        print(f"‚ùå Documentaci√≥n faltante: {', '.join(missing_docs)}")
    else:
        print("‚úÖ Documentaci√≥n completa")
        checks_passed += 1
    
    # Resumen final
    print("\n" + "=" * 50)
    print("üìä RESUMEN DE VERIFICACIONES:")
    print(f"‚úÖ Checks pasados: {checks_passed}/{total_checks}")
    
    if checks_passed == total_checks:
        print("\nüéâ ¬°SISTEMA LISTO PARA PRODUCCI√ìN!")
        print("üöÄ Puedes proceder con el deployment")
        return True
    else:
        print(f"\n‚ö†Ô∏è ATENCI√ìN: {total_checks - checks_passed} problemas encontrados")
        print("üîß Corrige los problemas antes del deployment")
        return False

def show_deployment_instructions():
    """Muestra instrucciones finales de deployment"""
    print("\nüìã INSTRUCCIONES FINALES DE DEPLOYMENT:")
    print("=" * 50)
    print("""
1Ô∏è‚É£ COMMIT Y PUSH:
   git add .
   git commit -m "üöÄ Sistema listo para producci√≥n"
   git push origin dev
   git checkout main
   git merge dev  
   git push origin main

2Ô∏è‚É£ STREAMLIT CLOUD:
   ‚Ä¢ Repository: damianndiaz/Profit_coach
   ‚Ä¢ Branch: main
   ‚Ä¢ Main file: main.py
   ‚Ä¢ Python version: 3.11+

3Ô∏è‚É£ CONFIGURAR SECRETS (Ver DEPLOYMENT_GUIDE.md):
   [database]
   url = "postgresql://..."
   
   [openai] 
   api_key = "sk-proj-..."
   assistant_id = "asst_..."
   
   [email]
   host = "smtp.gmail.com"
   username = "..."
   password = "..."

4Ô∏è‚É£ POST-DEPLOYMENT:
   ‚Ä¢ Verificar login funciona
   ‚Ä¢ Crear atleta de prueba
   ‚Ä¢ Probar chat b√°sico
   ‚Ä¢ üìé PROBAR ARCHIVOS ADJUNTOS (cr√≠tico)
   ‚Ä¢ Verificar env√≠o de emails

üéØ El sistema incluye todas las funcionalidades:
   ‚úÖ Chat inteligente
   ‚úÖ Gesti√≥n de atletas
   ‚úÖ Archivos adjuntos FUNCIONANDO
   ‚úÖ Export Excel profesional
   ‚úÖ Env√≠o autom√°tico de emails
   ‚úÖ Metodolog√≠a de 5 bloques

¬°√âXITO EN PRODUCCI√ìN! üöÄ
""")

if __name__ == "__main__":
    success = run_pre_deployment_checks()
    if success:
        show_deployment_instructions()
